# Example makefile with compilier warnings and automatic rules for a single
# executable composed of a lst of sources and headers. Rename this file to 
# Makefile and edit the variables defined under "EDIT THIS SECTION" 

# Build executable with:
# % make
# Delete object files and executable with:
# % make clean
# Rebuild all objects and executable with:
# % make -B

# See the Manual (% man make) for more information

## EDIT THIS SECTION ##
#
# Pick a name for your executable; e.g.: a.out
EXECUTABLE := extract_geometry_cube.out 
# List of source files in your project; e.g.: main.c 1.c 2.c ...
SOURCES := extract_geometry_cube.cpp site3d.cpp
# List of header files for your project; e.g.: 1.h 2.h ...
HEADERS := elastic_ising_3d.h site3d.h
# Compilier to use; maybe g++ or one of the portland group compilers
CC := gcc
CXX := g++
#
## NO EDITS REQUIRED BELOW ##

SHELL = /bin/sh

# Flags to pass to the compiler; per the reccomendations of the GNU Scientific Library
CXXFLAGS:= -std=c++0x -Wextra -pedantic -Wall -W -Wmissing-declarations -Wuninitialized -Wconversion -Wshadow -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -fshort-enums -fno-common 

# Compilier flags controling optimization levels. Use -O3 for full optimization,
# but make sure your results are consistent
# -g includes debugging information. You can also add -pg here for profiling 
OPTFLAGS:= -g -O2

# Flags to pass to the linker; -lm links in the standard c math library
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/newhome/frechette/lib:/newhome/frechette/local/armadillo-7.800.1"

LDFLAGS:= -lm -I/share/apps/gsl/include -L/share/apps/gsl/lib -lgsl -lgslcblas -L/home/frechette/local/lapack-3.7.0 -llapack -L/home/frechette/local/lapack-3.7.0/lapack-sandbox/lapack-build/lib -lblas -lgfortran -L/home/frechette/local/armadillo-7.800.1/my_usr_dir/usr/lib64 -larmadillo

# Variable to compose names of object files from the names of sources
OBJECTS = $(SOURCES:.cpp=.o)


# Default target depends on sources and headers to detect changes
all: $(SOURCES) $(HEADERS) $(EXECUTABLE)

# Rule to compile a source file to object code
%.o : %.cpp
	$(CXX) -c $(CXXFLAGS) $(OPTFLAGS) $< -o $@

# Build the executable by linking all objects
$(EXECUTABLE): $(OBJECTS)
	$(CXX) $(OBJECTS) $(LDFLAGS) -o $@

# clean up so we can start over (removes executable!)
clean:
	rm *.o $(EXECUTABLE)
